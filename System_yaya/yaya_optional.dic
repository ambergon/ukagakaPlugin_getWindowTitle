//******************************************************************************
//SHIORI/3.0制御スクリプト for YAYA
//オプション関数
//******************************************************************************

#define	C_CRLF2			C_CRLF+C_CRLF					/* 改行コードx2   */
#define	C_CRLF			CHR(0xd)+CHR(0xa)				/* 改行コード     */
#define	C_BYTE1			CHR(0x1)						/* バイト値1      */
#define	ESCAPE_TAG_1	CHR(0x3)+CHR(0x3)
#define	ESCAPE_TAG_2	CHR(0x4)+CHR(0x4)

//******************************************************************************
//初期化・後始末
//******************************************************************************

OnSystemLoad.SHIORI3FW.OPTIONAL
{
}

OnSystemUnload.SHIORI3FW.OPTIONAL
{
	ERASEVAR('SHIORI3FW.FMOCache')
	ERASEVAR('SHIORI3FW.SakuraNameList')
	ERASEVAR('SHIORI3FW.FMOTable')
}

//******************************************************************************
//さくらスクリプトタグ除去
//******************************************************************************

//------------------------------------------------------------------------------
//関数名：SHIORI3FW.EscapeDangerousTags
//機能　：危険なタグのみをエスケープ（\付加）する。
//------------------------------------------------------------------------------
SHIORI3FW.EscapeDangerousTags{
	_txt=_argv[0]
	_txt=REPLACE(_txt,'\\',ESCAPE_TAG_1)
	_txt=REPLACE(_txt,'\%',ESCAPE_TAG_2)
	_txt=RE_REPLACE(_txt, /
		'\\(?=(!\[(' + /
		'updatebymyself|vanishbymyself|enter,passivemode|' + /
		'leave,passivemode|lock,repaint|unlock,repaint|biff|' + /
		'open,browser|open,mailer|raise)' + /
		'.*?\]|\\j\[))' , /
		'\\')
	_txt=REPLACE(_txt,ESCAPE_TAG_2,'\%')
	_txt=REPLACE(_txt,ESCAPE_TAG_1,'\\')
	_txt
}

//------------------------------------------------------------------------------
//関数名：SHIORI3FW.EscapeAllTags
//機能　：全てのさくらスクリプトタグをエスケープ（\付加）する。
//------------------------------------------------------------------------------
SHIORI3FW.EscapeAllTags{
	_txt=_argv[0]
	_txt=REPLACE(_txt,'\\',ESCAPE_TAG_1)
	_txt=REPLACE(_txt,'\%',ESCAPE_TAG_2)
	_txt=REPLACE(_txt,'\','\\')
	_txt=REPLACE(_txt,'%','\%')
	_txt=REPLACE(_txt,ESCAPE_TAG_2,'\%')
	_txt=REPLACE(_txt,ESCAPE_TAG_1,'\\')
	_txt
}

//******************************************************************************
// FMO関連
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：SHIORI3FW.IsGhostExist(ゴースト名（sakuraname）[,fmoname])
//機能　：指定されたゴーストが存在するか調べる
//　　　　存在しなければ0、存在すれば1を返す
//------------------------------------------------------------------------------
SHIORI3FW.IsGhostExist
{
	_ghostname=_argv[0]
	SHIORI3FW.RefreshFMOTable(_argv[1])
	_result=ASEARCH(_ghostname,SHIORI3FW.SakuraNameList)
	if _result == -1 {
		0
	}else{
		1
	}
}


//------------------------------------------------------------------------------
//関数名：SHIORI3FW.RefreshFMOTable(FMO名称,無視するエントリのHWND)
//機能　：READFMOによってFMOテーブルを作る。
/*
FMOはキャッシュされ、変わっていなければ解析は行われない。
FMO名称を省略すると自動的に"Sakura"になる。
無視するエントリのHWNDを省略すると、sakurahwnd 変数が利用される。
（つまり自動的に自身の情報は含まれなくなる）

グローバル変数：SHIORI3FW.FMOCache		FMOの内容のキャッシュ（単純ダンプ）
グローバル変数：SHIORI3FW.FMOTable		FMOのテーブル（簡易配列。内容は以下）
id|name|keroname|hwnd|kerohwnd|path|ghostpath,
id|name|keroname|hwnd|kerohwnd|path|ghostpath,
...

グローバル変数：SHIORI3FW.SakuraNameList	sakuranameを列挙した汎用配列
また、いわゆる「非ゴースト」FMOエントリ（一時起動等）はこの時点で排除される。
*/
//------------------------------------------------------------------------------
SHIORI3FW.RefreshFMOTable : void
{
	_fmoname=TOSTR(argv[0])
	if _fmoname == '' {
		_fmoname='Sakura'
	}

	_result=READFMO(_fmoname)
	
	if SHIORI3FW.FMOCache == _result {
		//変わっていなければ即座に戻る
		return
	}

	//FMOの内容をキャッシュする
	SHIORI3FW.FMOCache=_result
	SHIORI3FW.FMOTable=''
	SHIORI3FW.SakuraNameList=IARRAY

	_ignorehwnd=TOSTR(_argv[1])
	if _ignorehwnd == '' {
		_ignorehwnd = sakurahwnd
	}

	//\r\nで分割
	_array = SPLIT(_result,C_CRLF)
	_arraynum=ARRAYSIZE(_array)

	//変数初期化	
	_fmotable_temp=''
	_id=''
	_oldid=''
	_name=''
	_keroname=''
	_hwnd=''
	_kerohwnd=''
	_path=''
	_ghostpath=''

	//結果を擬似２次配列にストア
	//ssp_fmo_header_000024dc_005c094e.hwnd,6031694
	//<------------------id----------> key  value
	for _i=0 ; _i<_arraynum-1 ; _i++ {
		//一時起動ゴーストかどうか？
		_buf=_array[_i]
		_id=_buf[0,'.']
		if 'SSTPVIEWER-' _in_ _id  || 'ssp_fmo_header_dummyentry' _in_ _id || 'SSSB' _in_ _id
		{
			//一時起動なのでなにもしない
		}else{
			if _oldid == '' {
				_oldid = _id
			}
			//IDが変わったら一時保存を書き出し
			if _oldid != _id {
				_fmotable_temp+="%(_oldid)|%(_name)|%(_keroname)|%(_hwnd)|%(_kerohwnd)|%(_path)|%(_ghostpath),"
				_oldid = _id
				_name=''
				_keroname=''
				_hwnd=''
				_kerohwnd=''
				_path=''
				_ghostpath=''
			}
			_kvpair=_buf[1,'.']
			_key=_kvpair[0,C_BYTE1]
			_val=_kvpair[1,C_BYTE1]
			
			//各値を一時保存
			case _key {
			when 'hwnd'		{_hwnd=_val}
			when 'name'		{_name=_val}
			when 'keroname'	{_keroname=_val}
			when 'path'		{_path=_val}
			when 'kerohwnd'	{_kerohwnd=_val}
			when 'ghostpath'{_ghostpath=_val}
			}
		}
	}
	//最後のエントリを書き出し
	_fmotable_temp += "%(_id)|%(_name)|%(_keroname)|%(_hwnd)|%(_kerohwnd)|%(_path)|%(_ghostpath)"
	
	//無視するHWNDを取り除き、同時にSakuraNameListを作成
	_count_temp=ARRAYSIZE(_fmotable_temp)
	for _i=0;_i<_count_temp;_i++ {
		_tablestr=_fmotable_temp[_i]
		_tablehwnd=_tablestr[3,'|']
		if _tablehwnd != _ignorehwnd {
			SHIORI3FW.FMOTable += _tablestr+','
			SHIORI3FW.SakuraNameList=(SHIORI3FW.SakuraNameList,_tablestr[1,'|'])
		}
	}
	
	//最後がカンマなら取り除く
	if SUBSTR(SHIORI3FW.FMOTable,STRLEN(SHIORI3FW.FMOTable)-1,1)==',' {
		SHIORI3FW.FMOTable=SUBSTR(SHIORI3FW.FMOTable,0,STRLEN(SHIORI3FW.FMOTable)-1)
	}
}
